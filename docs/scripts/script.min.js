var Battle = (function () {
    function Battle() {
    }
    Battle.prototype.defeatPokemon = function () {
    };
    return Battle;
}());
var gameConstants;
(function (gameConstants) {
    gameConstants.TICK_TIME = 10;
    gameConstants.BATTLE_TICK = 1000;
    gameConstants.UNDERGROUND_TICK = 1000;
    gameConstants.FARM_TICK = 1000;
    var GameStates;
    (function (GameStates) {
        GameStates[GameStates["paused"] = 0] = "paused";
        GameStates[GameStates["fighting"] = 1] = "fighting";
        GameStates[GameStates["gym"] = 2] = "gym";
        GameStates[GameStates["dungeon"] = 3] = "dungeon";
        GameStates[GameStates["safari"] = 4] = "safari";
    })(GameStates = gameConstants.GameStates || (gameConstants.GameStates = {}));
    var Regions;
    (function (Regions) {
        Regions[Regions["kanto"] = 0] = "kanto";
        Regions[Regions["johto"] = 1] = "johto";
        Regions[Regions["hoenn"] = 2] = "hoenn";
    })(Regions = gameConstants.Regions || (gameConstants.Regions = {}));
    gameConstants.RegionRoutes = {
        0: 25,
        1: 0,
        2: 0
    };
    var PokemonType;
    (function (PokemonType) {
        PokemonType[PokemonType["normal"] = 0] = "normal";
        PokemonType[PokemonType["fight"] = 1] = "fight";
        PokemonType[PokemonType["flying"] = 2] = "flying";
        PokemonType[PokemonType["poison"] = 3] = "poison";
        PokemonType[PokemonType["ground"] = 4] = "ground";
        PokemonType[PokemonType["rock"] = 5] = "rock";
        PokemonType[PokemonType["bug"] = 6] = "bug";
        PokemonType[PokemonType["ghost"] = 7] = "ghost";
        PokemonType[PokemonType["steel"] = 8] = "steel";
        PokemonType[PokemonType["fire"] = 9] = "fire";
        PokemonType[PokemonType["water"] = 10] = "water";
        PokemonType[PokemonType["grass"] = 11] = "grass";
        PokemonType[PokemonType["electric"] = 12] = "electric";
        PokemonType[PokemonType["psychic"] = 13] = "psychic";
        PokemonType[PokemonType["ice"] = 14] = "ice";
        PokemonType[PokemonType["dragon"] = 15] = "dragon";
        PokemonType[PokemonType["dark"] = 16] = "dark";
        PokemonType[PokemonType["fairy"] = 17] = "fairy";
    })(PokemonType = gameConstants.PokemonType || (gameConstants.PokemonType = {}));
})(gameConstants || (gameConstants = {}));
var pokemonsPerRoute = {
    0: {
        1: {
            land: ["Pidgey", "Rattata"],
            water: []
        },
        2: {
            land: ["Caterpie", "Weedle", "Rattata", "Nidoran(F)", "Nidoran(M)"],
            water: []
        },
        3: {
            land: ["Pidgey", "Rattata", "Spearow", "Sandshrew", "Jigglypuff", "Mankey"],
            water: []
        },
        4: {
            land: ["Rattata", "Spearow", "Ekans", "Sandshrew", "Mankey"],
            water: ["Poliwag", "Goldeen", "Psyduck", "Krabby", "Seaking"]
        },
        5: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Jigglypuff", "Oddish", "Meowth", "Mankey", "Abra", "Bellsprout"],
            water: []
        },
        6: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Jigglypuff", "Oddish", "Meowth", "Mankey", "Abra", "Bellsprout"],
            water: ["Poliwag", "Goldeen", "Shellder", "Krabby"]
        },
        7: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Vulpix", "Jigglypuff", "Oddish", "Meowth", "Mankey", "Growlithe", "Abra", "Bellsprout"],
            water: []
        },
        8: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Ekans", "Sandshrew", "Vulpix", "Jigglypuff", "Meowth", "Mankey", "Growlithe", "Abra", "Kadabra"],
            water: []
        },
        9: {
            land: ["Rattata", "Raticate", "Spearow", "Fearow", "Ekans", "Sandshrew", "Nidoran(F)", "Nidoran(M)", "Nidorina", "Nidorino"],
            water: []
        },
        10: {
            land: ["Rattata", "Raticate", "Spearow", "Ekans", "Sandshrew", "Nidoran(F)", "Nidoran(M)", "Machop", "Magnemite", "Voltorb"],
            water: ["Poliwag", "Goldeen", "Poliwhirl", "Slowpoke", "Krabby", "Kingler", "Horsea"]
        },
        11: {
            land: ["Pidgey", "Pidgeotto", "Raticate", "Rattata", "Spearow", "Ekans", "Sandshrew", "Drowzee"],
            water: ["Poliwag", "Goldeen", "Tentacool", "Shellder", "Krabby", "Horsea"]
        },
        12: {
            land: ["Pidgey", "Pidgeotto", "Oddish", "Gloom", "Venonat", "Bellsprout", "Weepinbell", "Farfetch'd", "Snorlax"],
            water: ["Slowbro", "Magikarp", "Poliwag", "Goldeen", "Tentacool", "Krabby", "Horsea", "Seadra"]
        },
        13: {
            land: ["Pidgey", "Pidgeotto", "Oddish", "Gloom", "Venonat", "Bellsprout", "Weepinbell", "Farfetch'd", "Ditto"],
            water: ["Slowbro", "Magikarp", "Poliwag", "Goldeen", "Tentacool", "Krabby", "Horsea", "Seadra"]
        },
        14: {
            land: ["Pidgey", "Pidgeotto", "Oddish", "Gloom", "Venonat", "Venomoth", "Bellsprout", "Weepinbell", "Ditto"],
            water: ["Poliwag", "Goldeen"]
        },
        15: {
            land: ["Pidgey", "Pidgeotto", "Oddish", "Gloom", "Venonat", "Venomoth", "Bellsprout", "Weepinbell", "Ditto"],
            water: []
        },
        16: {
            land: ["Rattata", "Raticate", "Spearow", "Fearow", "Doduo", "Snorlax"],
            water: []
        },
        17: {
            land: ["Raticate", "Spearow", "Fearow", "Ponyta", "Doduo", "Dodrio"],
            water: ["Poliwag", "Goldeen", "Tentacool", "Shellder", "Krabby"]
        },
        18: {
            land: ["Rattata", "Raticate", "Spearow", "Fearow", "Doduo"],
            water: ["Poliwag", "Goldeen", "Tentacool", "Shellder", "Krabby"]
        },
        19: {
            land: [],
            water: ["Tentacool", "Magikarp", "Poliwag", "Goldeen", "Tentacruel", "Shellder", "Horsea", "Staryu"]
        },
        20: {
            land: [],
            water: ["Tentacool", "Magikarp", "Poliwag", "Goldeen", "Tentacruel", "Shellder", "Horsea", "Staryu"]
        },
        21: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Raticate", "Tangela"],
            water: ["Magikarp", "Poliwag", "Goldeen", "Tentacruel", "Shellder", "Horsea", "Staryu"]
        },
        22: {
            land: ["Rattata", "Spearow", "Nidoran(F)", "Nidoran(M)", "Mankey"],
            water: ["Poliwag", "Poliwhirl", "Goldeen"]
        },
        23: {
            land: ["Spearow", "Fearow", "Ekans", "Arbok", "Sandshrew", "Sandslash", "Nidorina", "Nidorino", "Mankey", "Primeape", "Ditto"],
            water: ["Poliwag", "Goldeen", "Poliwhirl", "Slowbro", "Kingler", "Seadra", "Seaking"]
        },
        24: {
            land: ["Caterpie", "Metapod", "Weedle", "Kakuna", "Pidgey", "Pidgey", "Pidgeotto", "Oddish", "Venonat", "Abra", "Bellsprout"],
            water: ["Poliwag", "Goldeen", "Psyduck", "Krabby", "Seaking"]
        },
        25: {
            land: ["Caterpie", "Metapod", "Weedle", "Kakuna", "Pidgey", "Pidgeotto", "Oddish", "Venonat", "Abra", "Bellsprout"],
            water: ["Poliwag", "Goldeen", "Psyduck", "Krabby"]
        }
    }
};
///<reference path="pokemonsPerRoute.ts"/>
var RouteHelper = (function () {
    function RouteHelper() {
    }
    RouteHelper.getAvailablePokemonList = function (route, region, includeWater) {
        if (includeWater === void 0) { includeWater = false; }
        // If the route is somehow higher than allowed, use the first route to generate PokÃ©mon
        if (route > gameConstants.RegionRoutes[region]) {
            route = 1;
        }
        var possiblePokemons = pokemonsPerRoute[region][route];
        if (includeWater || possiblePokemons.land.length == 0) {
            return possiblePokemons.land.concat(possiblePokemons.water);
        }
        else {
            return possiblePokemons.land;
        }
    };
    RouteHelper.routeCompleted = function (route, region, includeShiny, includeWater) {
        if (includeShiny === void 0) { includeShiny = false; }
        if (includeWater === void 0) { includeWater = false; }
        var possiblePokemon = this.getAvailablePokemonList(route, region, includeWater);
        for (var i = 0; i < possiblePokemon.length; i++) {
            // TODO fix if alreadyCaught is implemented
            // if (!alreadyCaught(possiblePokemon[i])) {
            //     return false;
            // }
        }
        return true;
    };
    return RouteHelper;
}());
///<reference path="battle/RouteHelper.ts"/>
document.addEventListener("DOMContentLoaded", function (event) {
    var game = new Game();
    game.start();
});
var Game = (function () {
    function Game() {
    }
    Game.prototype.start = function () {
        this.load();
        this.interval = setInterval(this.gameTick(), gameConstants.TICK_TIME);
    };
    Game.prototype.stop = function () {
        clearTimeout(this.interval);
    };
    Game.prototype.gameTick = function () {
        // Update tick counters
        this.battleCounter += gameConstants.TICK_TIME;
        this.undergroundCounter += gameConstants.TICK_TIME;
        this.farmCounter += gameConstants.TICK_TIME;
        if (this.battleCounter > gameConstants.BATTLE_TICK) {
            this.battleCounter = 0;
        }
        console.log(RouteHelper.getAvailablePokemonList(100, gameConstants.Regions.kanto));
    };
    Game.prototype.save = function () {
    };
    Game.prototype.load = function () {
    };
    return Game;
}());
var player = (function () {
    function player() {
    }
    player.calculateAttack = function () {
        // TODO Calculate pokemon attack by checking the caught list, upgrades and multipliers.
        return 1;
    };
    player.calculateClickAttack = function () {
        // TODO Calculate click attack by checking the caught list size, upgrades and multipliers.
        return 1;
    };
    player.calculateMoneyMultiplier = function () {
        // TODO Calculate money multiplier by checking upgrades and multipliers.
        return 1;
    };
    player.calculateExpMultiplier = function () {
        // TODO Calculate exp multiplier by checking upgrades and multipliers.
        return 1;
    };
    player.calculateDungeonTokenMultiplier = function () {
        // TODO Calculate dungeon token multiplier by checking upgrades and multipliers.
        return 1;
    };
    player.calculateCatchTime = function () {
        // TODO Calculate catch time by checking upgrades and multipliers.
        return 2000;
    };
    return player;
}());
var PokemonTypes = gameConstants.PokemonType;
var battlePokemon = (function () {
    /**
     * In case you want to manually create a PokÃ©mon instead of generating it from the route number
     * @param name PokÃ©mon name
     * @param type1 First type of the PokÃ©mon
     * @param type2 Second type of the PokÃ©mon
     * @param maxHealth max health that the PokÃ©mon can have
     * @param catchRate base chance of catching this PokÃ©mon
     * @param exp base exp reward for defeating this PokÃ©mon
     * @param money exp base exp reward for defeating this PokÃ©mon
     */
    function battlePokemon(name, type1, type2, maxHealth, catchRate, exp, money) {
        this.name = name;
        this.type1 = type1;
        this.type2 = type2;
        this.health = maxHealth;
        this.maxHealth = maxHealth;
        this.catchRate = catchRate;
        this.exp = exp;
        this.money = money;
    }
    battlePokemon.prototype.isAlive = function () {
        return undefined;
    };
    battlePokemon.prototype.defeat = function () {
        return undefined;
    };
    battlePokemon.prototype.damage = function () {
    };
    return battlePokemon;
}());
var randomBattlePokemonGenerator = (function () {
    function randomBattlePokemonGenerator() {
    }
    randomBattlePokemonGenerator.generate = function (route) {
        if (route > 25) {
            return null;
        }
        var name;
        var type1;
        var type2;
        var maxHealth;
        var catchRate;
        var exp;
        var money;
    };
    return randomBattlePokemonGenerator;
}());
